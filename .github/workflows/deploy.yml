name: Go API Deploy to AWS ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.24.1"

      - name: Run tests (optional but recommended)
        run: go test ./...

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/open-typing-api:latest .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REGISTRY }}/open-typing-api:latest

      - name: Log in to AWS using GitHub Secrets
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS Task Definition with new Docker image and environment variables
        run: |
          ecs_task_definition=$(aws ecs describe-task-definition --task-definition your-task-definition-family)
          new_task_definition=$(echo $ecs_task_definition | jq '.taskDefinition.containerDefinitions[0].image = "${{ secrets.ECR_REGISTRY }}/open-typing-api:latest" | .taskDefinition.containerDefinitions[0].environment += [
              {"name": "DB_USER", "value": "${{ secrets.DB_USER }}"},
              {"name": "DB_PASSWORD", "value": "${{ secrets.DB_PASSWORD }}"},
              {"name": "DB_NAME", "value": "${{ secrets.DB_NAME }}"},
              {"name": "DB_HOST", "value": "${{ secrets.DB_HOST }}"},
              {"name": "DB_PORT", "value": "${{ secrets.DB_PORT }}"},
              {"name": "AWS_ACCESS_KEY_ID", "value": "${{ secrets.AWS_ACCESS_KEY_ID }}"},
              {"name": "AWS_SECRET_ACCESS_KEY", "value": "${{ secrets.AWS_SECRET_ACCESS_KEY }}"},
              {"name": "AWS_REGION", "value": "${{ secrets.AWS_REGION }}"}
          ] | { family: .taskDefinition.family, containerDefinitions: .containerDefinitions }'

          echo "$new_task_definition" | aws ecs register-task-definition --cli-input-json file://-

      - name: Update ECS Service to Use New Task Definition
        run: |
          latest_revision=$(aws ecs describe-task-definition --task-definition your-task-definition-family --query "taskDefinition.revision" --output text)

          aws ecs update-service \
            --cluster your-cluster-name \
            --service your-service-name \
            --task-definition your-task-definition-family:$latest_revision \
            --force-new-deployment
